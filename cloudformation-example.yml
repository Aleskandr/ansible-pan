- name: setup protected server stack
  hosts: 127.0.0.1
  connection: local

  vars:
    region: eu-west-1
    instance_type: c4.xlarge
    vpc_cidr: 10.0.0.0/16
    private_subnet_cidr: 10.0.254.0/24
    public_subnet_cidr: 10.0.0.0/24
    dns_server_primary: 8.8.8.8
    dns_server_secondary: 8.8.4.4
    panorama_primary: 172.16.31.1.4
    panorama_secondary: 172.16.31.1.6
    stack_name: pa-vm-aws-test
    cloudformation_template: files/cloudformation-example.template
    # admin_password: badpasswordbad 
    # key_name: pa-vm-aws-kilgore
    # key_filename: /home/kilgore/pa-vm-aws-kilgore.pem
    # auth_code: IBADCODE

  tasks:
  - name: create key pair
    ec2_key: name="{{key_name}}" state=present region="{{region}}"
    register: pavmawskey
  - name: write private key to file
    copy: content="{{pavmawskey.key.private_key}}" dest="{{key_filename}}" mode=0600 force=yes
    when: pavmawskey.changed == True
  - name: create cloudformation stack
    cloudformation:
      stack_name: "{{stack_name}}"
      state: "present"
      disable_rollback: true
      template: "{{cloudformation_template}}"
      template_parameters:
        KeyName: "{{key_name}}"
        PAVMAWSInstanceType: "{{instance_type}}"
        VPCCidr: "{{vpc_cidr}}"
        PrivateSubnetCidr: "{{private_subnet_cidr}}"
        PublicSubnetCidr: "{{public_subnet_cidr}}"
    register: stack
  - name: wait for SSH (timeout 10min)
    wait_for: port=22 host="{{stack.stack_outputs.PAVMAWSEIPMgmt}}" search_regex=SSH timeout=600
  - name: set admin password
    panos_admpwd: ip_address="{{stack.stack_outputs.PAVMAWSEIPMgmt}}" key_filename="{{key_filename}}" password="{{admin_password}}"
    register: result
    until: not result|failed
    retries: 10
    delay: 30
  - name: set dns and panorama
    panos_mgtconfig:
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      password: "{{admin_password}}"
      dns_server_primary: "{{dns_server_primary}}"
      dns_server_secondary: "{{dns_server_secondary}}"
      panorama_primary: "{{panorama_primary}}"
      panorama_secondary: "{{panorama_secondary}}"
  - name: configure ethernet1/1
    panos_dhcpif:
      password: "{{admin_password}}"
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      if_name: "ethernet1/1"
      zone_name: "public"
      create_default_route: "yes"
  - name: configure ethernet1/2
    panos_dhcpif:
      password: "{{admin_password}}"
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      if_name: "ethernet1/2"
      zone_name: "private"
      create_default_route: "no"
  - name: create bidirectional source nat rule for server
    panos_snat:
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      password: "{{admin_password}}"
      rule_name: "snat"
      bidirectional: "true"
      snat_type: "static-ip"
      translated_address: "{{stack.stack_outputs.PAVMAWSPublicIP}}"
      from_zone: "private"
      to_zone: "public"
      source: "{{stack.stack_outputs.ServerIP}}"
      destination: "any"
      service: "any"
  - name: create defult security profile group
    pa_vm_aws_pg:
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      password: "{{admin_password}}"
      username: "admin"
      pg_name: "pg-default"
      virus: "default"
      spyware: "default"
      vulnerability: "default"
  - name: create security rule for server
    panos_srule:
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      password: "{{admin_password}}"
      rule_name: "server permit"
      from_zone: ["public"]
      to_zone: ["private"]
      source: ["any"]
      source_user: ["any"]
      destination: ["{{stack.stack_outputs.PAVMAWSPublicIP}}"]
      category: ["any"]
      application: ["ssh"]
      service: ["application-default"]
      hip_profiles: ["any"]
      group_profile: "pg-default"
      action: "allow"
  - name: create rule for server egress traffic
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      password: "{{admin_password}}"
      rule_name: "server egress"
      from_zone: ["private"]
      to_zone: ["public"]
      source: ["{{stack.stack_outputs.ServerIP}}"]
      source_user: ["any"]
      destination: ["any"]
      category: ["any"]
      application: ["any"]
      service: ["application-default"]
      hip_profiles: ["any"]
      group_profile: "pg-default"
      action: "allow"      
  - name: create deny all rule
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      password: "{{admin_password}}"
      rule_name: "deny all"
      action: "deny"
      rule_type: "interzone"
  - name: fetch license
    panos_lic: ip_address="{{stack.stack_outputs.PAVMAWSEIPMgmt}}" password="{{admin_password}}" auth_code="{{auth_code}}"
  - name: wait for reboot starting (1 minute)
    pause: seconds=60
  - name: waiting for reboot
    panos_check: 
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}" 
      password: "{{admin_password}}"
    register: result
    until: not result|failed
    retries: 10
    delay: 30
  - name: upgrade content
    panos_content: 
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}" 
      password: "{{admin_password}}"
      content_update: yes
    ignore_errors: yes
  - name: upgrade anti-virus
    panos_content: 
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}" 
      password: "{{admin_password}}"
      anti_virus_update: yes
    ignore_errors: yes
  - name: upgrade pan-db
    panos_content: 
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}" 
      password: "{{admin_password}}"
      url_download_region: europe
    ignore_errors: yes
  - name: upgrade wildfire
    panos_content: 
      ip_address: "{{stack.stack_outputs.PAVMAWSEIPMgmt}}"
      password: "{{admin_password}}"
      wildfire_update: yes
    ignore_errors: yes
  - name: print stack results
    debug: msg="result {{stack.stack_outputs}}"

