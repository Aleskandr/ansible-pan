#!/usr/bin/python
import sys

try:
    import pan.xapi
except ImportError:
    print "failed=True msg='pan-python required for this module'"
    sys.exit(1)

_XPATH_DNS_SERVERS = "/config/devices/entry[@name='localhost.localdomain']/deviceconfig/system/dns-setting/servers"
_XPATH_PANORAMA_SERVERS = "/config/devices/entry[@name='localhost.localdomain']/deviceconfig/system"

def set_dns_server(xapi, new_dns_server, primary=True):
    if primary:
        tag = "primary"
    else:
        tag = "secondary"
    xpath = _XPATH_DNS_SERVERS+"/"+tag

    # check the current element value
    xapi.get(xpath)
    val = xapi.element_root.find(".//"+tag)
    if val is not None:
        # element exists
        val = val.text
    if val == new_dns_server:
        return False

    element = "<%(tag)s>%(value)s</%(tag)s>"%dict(tag=tag, value=new_dns_server)
    xapi.edit(xpath, element)

    return True

def set_panorama_server(xapi, new_panorama_server, primary=True):
    if primary:
        tag = "panorama-server"
    else:
        tag = "panorama-server-2"
    xpath = _XPATH_PANORAMA_SERVERS+"/"+tag

    # check the current element value
    xapi.get(xpath)
    val = xapi.element_root.find(".//"+tag)
    if val is not None:
        # element exists
        val = val.text
    if val == new_panorama_server:
        return False

    element = "<%(tag)s>%(value)s</%(tag)s>"%dict(tag=tag, value=new_panorama_server)
    xapi.edit(xpath, element)

    return True

def main():
    argument_spec = dict(
            ip_address=dict(default=None),
            password=dict(default=None),
            username=dict(default='admin'),
            dns_server_primary=dict(default=None),
            dns_server_secondary=dict(default=None),
            panorama_primary=dict(default=None),
            panorama_secondary=dict(default=None)
        )
    module = AnsibleModule(argument_spec=argument_spec)

    ip_address = module.params["ip_address"]
    if not ip_address:
        module.fail_json(msg="ip_address should be specified")
    password = module.params["password"]
    if not password:
        module.fail_json(msg="password is required")
    username = module.params['username']

    xapi = pan.xapi.PanXapi(hostname=ip_address, api_username=username, api_password=password)

    dns_server_primary = module.params['dns_server_primary']
    dns_server_secondary = module.params['dns_server_secondary']
    panorama_primary = module.params['panorama_primary']
    panorama_secondary = module.params['panorama_secondary']

    changed = False
    if dns_server_primary is not None:
        changed |= set_dns_server(xapi, dns_server_primary, primary=True)
    if dns_server_secondary is not None:
        changed |= set_dns_server(xapi, dns_server_secondary, primary=False)
    if panorama_primary is not None:
        changed |= set_panorama_server(xapi, panorama_primary, primary=True)
    if panorama_secondary is not None:
        changed |= set_panorama_server(xapi, panorama_secondary, primary=False)

    if changed:
        xapi.commit(cmd="<commit></commit>", sync=True, interval=1)

    module.exit_json(changed=changed, msg="okey dokey")

from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
