#!/usr/bin/python

# Copyright (c) 2014, Palo Alto Networks <techbizdev@paloaltonetworks.com>
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

DOCUMENTATION = '''
---
module: panos_nat
short_description: create a nat rule
description:
    - Create a nat rule
author: Palo Alto Networks - lmori
version_added: "0.1"
requirements:
    - pan-python
options:
    ip_address:
        description:
            - IP address (or hostname) of PAN-OS device
        required: true
        default: null
    password:
        description:
            - password for authentication
        required: true
        default: null   
    username:
        description:
            - username for authentication
        required: false
        default: "admin"
    rule_name:
        description:
            - name of the SNAT rule
        required: true
        default: null
    from_zone:
        description:
            - source zones
        required: true
        default: null
    to_zone:
        description:
            - destination zone
        required: true
        default: null
    source:
        description:
            - source address
        required: false
        default: ["any"]
    destination:
        description:
            - destination address
        required: false
        default: ["any"]
    service:
        description:
            - service
        required: false
        default: "any"
    snat_type:
        description:
            - type of source translation
        required: false
        default: null
    snat_address:
        description:
            - snat translated address
        required: false
        default: null
    snat_interface:
        description:
            - snat interface
        required: false
        default: null
    snat_interface_address:
        description:
            - snat interface address
        required: false
        default: null
    snat_bidirectional:
        description:
            - bidirectional flag
        required: false
        default: false
    dnat_address:
        description:
            - dnat translated address
        required: false
        default: null
    dnat_port:
        description:
            - dnat translated port
        required: false
        default: null
'''

EXAMPLES = '''

'''

import sys

try:
    import pan.xapi
except ImportError:
    print "failed=True msg='pan-python required for this module'"
    sys.exit(1)

_NAT_XPATH = "/config/devices/entry[@name='localhost.localdomain']/vsys/entry[@name='vsys1']/rulebase/nat/rules/entry[@name='%s']"

def nat_rule_exists(xapi, rule_name):
    xapi.get(_NAT_XPATH%rule_name)
    e = xapi.element_root.find('.//entry')
    if e is None:
        return False
    return True

def dnat_xml(m, dnat_address, dnat_port):
    if translated_address is None and translated_port is None:
        return None

    exml = ["<destination-translation>"]
    if dnat_address is not None:
        exml.append("<translated-address>%s</translated-address>"%dnat_address)
    if dnat_port is not None:
        exml.append("<translated-port>%s</translated-port>"%dnat_port)
    exml.append('</destination-translation>')

    return ''.join(exml)

def snat_xml(m, snat_type, snat_address, snat_interface, snat_interface_address, snat_bidirectional):
    if snat_type == 'static-ip':
        if snat_address is None:
            m.fail_json(msg="snat_address should be speicified for snat_type static-ip")

        exml = ["<source-translation>",
                "<static-ip>"]
        exml.append('<bi-directional>%s</bi-directional>'%('yes' if snat_bidirectional else 'no'))
        exml.append('<translated-address>%s</translated-address>'%snat_address)
        exml.append('</static-ip>')
        exml.append('</source-translation>')
    elif snat_type == 'dynamic-ip-and-port':
        exml = ["<source-translation>",
                "<dynamic-ip-and-port>"]
        if snat_interface is not None:
            exml = exml+[
                "<interface-address>",
                "<interface>%s</interface>"%snat_interface]
            if snat_interface_address is not None:
                exml.append("<ip>%s</ip>"%snat_interface_address)
            exml.append("</interface-address>")
        elif snat_address is not None:
            exml.append("<translated-address>")
            for t in snat_address:
                exml.append("<member>%s</member>"%t)
            exml.append("</translated-address>")
        else:
            m.fail_json(msg="no snat_interface or snat_address specified for snat_type dynamic-ip-and-port")
        exml.append('</dynamic-ip-and-port>')
        exml.append('</source-translation>')
    else:
        m.fail_json(msg="unknown snat_type %s"%snat_type)

    return ''.join(exml)

def add_nat(xapi, module, rule_name, from_zone, to_zone, source, destination, service, dnatxml=None, snatxml=None):
    if translated_address is None and translated_port is None:
        module.fail_json(msg="at least one of translated_address and translated_port should be specified")

    if nat_rule_exists(xapi, rule_name):
        return False

    exml = []
    if dnatxml:
        exml.append(dnatxml)
    if snatxml:
        exml.append(snatxml)

    exml.append("<to><member>%s</member></to>"%to_zone)

    exml.append("<from>")
    exml = exml+["<member>%s</member>"%e for e in from_zone]
    exml.append("</from>")

    exml.append("<source>")
    exml = exml+["<member>%s</member>"%e for e in source]
    exml.append("</source>")

    exml.append("<destination>")
    exml = exml+["<member>%s</member>"%e for e in destination]
    exml.append("</destination>")

    exml.append("<service>%s</service>"%service)

    exml.append("<nat-type>ipv4</nat-type>")

    exml = ''.join(exml)

    xapi.set(xpath=_NAT_XPATH%rule_name, element=exml)

    return True

def main():
    argument_spec = dict(
            ip_address=dict(default=None),
            password=dict(default=None),
            username=dict(default='admin'),
            rule_name=dict(default=None),
            from_zone=dict(default=None),
            to_zone=dict(default=None),
            source=dict(default=["any"]),
            destination=dict(default=["any"]),
            service=dict(default="any"),
            snat_type=dict(default=None),
            snat_address=dict(default=None),
            snat_interface=dict(default=None),
            snat_interface_address=dict(default=None),
            snat_bidirectional=dict(default=False),
            dnat_address=dict(default=None),
            dnat_port=dict(default=None)
        )
    module = AnsibleModule(argument_spec=argument_spec)

    ip_address = module.params["ip_address"]
    if not ip_address:
        module.fail_json(msg="ip_address should be specified")
    password = module.params["password"]
    if not password:
        module.fail_json(msg="password is required")
    username = module.params['username']

    xapi = pan.xapi.PanXapi(hostname=ip_address, api_username=username, api_password=password)

    rule_name = module.params['rule_name']
    if not rule_name:
        module.fail_json(msg='rule_name is required')
    translated_address = module.params['translated_address']
    translated_port = module.params['translated_port']
    from_zone = module.params['from_zone']
    if from_zone is None:
        module.fail_json(msg='from_zone is required')
    to_zone = module.params['to_zone']
    if to_zone is None:
        module.fail_json(msg='to_zone is required')
    source = module.params['source']
    destination = module.params['destination']
    service = module.params['service']

    snat_type = module.params['snat_type']
    snat_address = module.params['snat_address']
    snat_interface = module.params['snat_interface']
    snat_interface_address = module.params['snat_interface_address']
    snat_bidirectional = module.params['snat_bidirectional']

    dnat_address = module.params['dnat_address']
    dnat_port = module.params['dnat_port']

    if not nat_rule_exists(xapi, rule_name):
        module.exit_json(changed=False, msg="rule exists")

    changed = add_nat(xapi, module, 
                       rule_name, 
                       from_zone, 
                       to_zone, 
                       source, 
                       destination, 
                       service, 
                       dnatxml=dnat_xml(module, dnat_address, dnat_port),
                       snatxml=snat_xml(module, snat_type, snat_address, snat_interface, snat_interface_address, snat_bidirectional))

    if changed:
        xapi.commit(cmd="<commit></commit>", sync=True, interval=1)

    module.exit_json(changed=changed, msg="okey dokey")

from ansible.module_utils.basic import *

main()
