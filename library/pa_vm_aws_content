#!/usr/bin/python
import sys
import time

try:
    import pan.xapi
except ImportError:
    print "failed=True msg='pan-python required for this module'"
    sys.exit(1)

"<request><url-filtering><download><paloaltonetworks><region></region></paloaltonetworks></download></url-filtering></request>"
PAN_DB_REGIONS = [
    "APAC",
    "Europe",
    "Japan",
    "Latin-America",
    "North-America",
    "Russia"
]

class JobException(Exception):
    pass

def check_job(xapi, jobnum, timeout=240):
    now = time.time()
    while time.time() < now+timeout:
        xapi.op(cmd='<show><jobs><id>%s</id></jobs></show>'%jobnum)
        status = xapi.element_root.find('.//status')
        if status == None:
            raise JobException("Invalid job %s: no status information %s"%(jobnum, xapi.xml_document))
        if status.text == 'FIN':
            result = xapi.element_root.find('.//job/result')
            if result == None:
                raise JobException("Invalid FIN job %s: no result %s"%(jobnum, xapi.xml_document))
            if result.text != 'OK':
                raise JobException("Job %s failed: %s"%(jobnum, xapi.xml_document))
            nextjob = xapi.element_root.find('.//nextjob')
            if nextjob is not None:
                return nextjob.text
            return None
    raise JobException("Timeout in job %s"%jobnum)

def upgrade_something(xapi, module, something):
    # check something updates
    xapi.op(cmd="<request><%(something)s><upgrade><check></check></upgrade></%(something)s></request>"%dict(something=something))

    entries = xapi.element_root.findall('.//content-updates/entry')
    cus = []
    for e in entries:
        cus.append((e.find('version').text, e.find('current').text, e.find('downloaded').text))
    if len(cus) == 0:
        module.fail_json(msg="no content-updates after check")
    cus = sorted(cus, key=lambda x: x[0], reverse=True)

    latestcus = cus[0]
    if latestcus[1] == 'yes':
        # latest already current
        return False

    if not latestcus[2] == 'yes':
        # let's download it
        xapi.op(cmd="<request><%(something)s><upgrade><download><latest></latest></download></upgrade></%(something)s></request>"%dict(something=something))
        job = xapi.element_root.find('.//job')
        if job is None:
            module.fail_json(msg="no job from download latest %s request"%something)
        job = job.text
        check_job(xapi, job)

    xapi.op(cmd="<request><%(something)s><upgrade><install><version>latest</version></install></upgrade></%(something)s></request>"%dict(something=something))
    job = xapi.element_root.find('.//job')
    if job is None:
        module.fail_json(msg="no hob from install latest %s request"%something)
    job = job.text
    jobresult = check_job(xapi, job)
    if jobresult is None:
        module.fail_json(msg="no nextjob from install latest %s job"%something)
    check_job(xapi, jobresult)

    return True

def upgrade_content(xapi, module):
    return upgrade_something(xapi, module, 'content')

def upgrade_anti_virus(xapi, module):
    return upgrade_something(xapi, module, 'anti-virus')

def upgrade_wildfire(xapi, module):
    return upgrade_something(xapi, module, 'wildfire')

def download_url_region(xapi, module, region):
    pan_db_region = None
    for r in PAN_DB_REGIONS:
        if region.lower() == r.lower():
            pan_db_region = r
            break
    if pan_db_region is None:
        module.fail_json(msg="Invalid PAN-DB region %s"%region)

    xapi.op(cmd="<request><url-filtering><download><paloaltonetworks><region>%s</region></paloaltonetworks></download></url-filtering></request>"%pan_db_region)

    return True

def main():
    argument_spec = dict(
            ip_address=dict(default=None),
            password=dict(default=None),
            username=dict(default='admin'),
            url_download_region=dict(default=None),
            content_update=dict(type='bool', default=False),
            anti_virus_update=dict(type='bool', default=False),
            wildfire_update=dict(type='bool', default=False)
        )
    module = AnsibleModule(argument_spec=argument_spec)

    ip_address = module.params["ip_address"]
    if not ip_address:
        module.fail_json(msg="ip_address should be specified")
    password = module.params["password"]
    if not password:
        module.fail_json(msg="password is required")
    username = module.params['username']

    xapi = pan.xapi.PanXapi(hostname=ip_address, api_username=username, api_password=password)

    changed = False

    content_update = module.params['content_update']
    if content_update:
        changed |= upgrade_content(xapi, module)
    anti_virus_update = module.params['anti_virus_update']
    if anti_virus_update:
        changed |= upgrade_anti_virus(xapi, module)
    wildfire_update = module.params['wildfire_update']
    if wildfire_update:
        changed |= upgrade_wildfire(xapi, module)
    url_download_region = module.params["url_download_region"]
    if url_download_region:
        changed |= download_url_region(xapi, module, url_download_region)

    module.exit_json(changed=changed, msg="okey dokey")

from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
