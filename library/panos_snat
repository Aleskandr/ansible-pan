#!/usr/bin/python

# Copyright (c) 2014, Palo Alto Networks <techbizdev@paloaltonetworks.com>
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

DOCUMENTATION = '''
---
module: panos_snat
short_description: create a source nat rule
description:
    - Create a source nat rule
    - Note: only static SNAT rules are supported
author: Palo Alto Networks - lmori
version_added: "0.1"
requirements:
    - pan-python
options:
    ip_address:
        description:
            - IP address (or hostname) of PAN-OS device
        required: true
        default: null
    password:
        description:
            - password for authentication
        required: true
        default: null   
    username:
        description:
            - username for authentication
        required: false
        default: "admin"
    rule_name:
        description:
            - name of the SNAT rule
        required: true
        default: null
    from_zone:
        description:
            - source zone
        required: true
        default: null
    to_zone:
        description:
            - destination zone
        required: true
        default: null
    source:
        description:
            - source address
        required: false
        default: "any"
    destination:
        description:
            - destination address
        required: false
        default: "any"
    service:
        description:
            - service
        required: false
        default: "any"
    snat_type:
        description:
            - type of SNAT
        required: true
        default: null
    translated_address:
        description:
            - translated address
        required: false
        default: null
    bidirectional:
        description:
            - whether the SNAT should be bidirectional
        required: false
        default: false
'''

EXAMPLES = '''
- name: create bidirectional source nat rule
  panos_snat:
    ip_address: "192.168.1.1"
    password: "admin"
    rule_name: "static bidir snat"
    bidirectional: "true"
    snat_type: "static-ip"
    translated_address: "1.1.1.1"
    from_zone: "private"
    to_zone: "public"
    source: "10.1.1.1"
    destination: "any"
    service: "any"
'''

import sys

try:
    import pan.xapi
except ImportError:
    print "failed=True msg='pan-python required for this module'"
    sys.exit(1)

_NAT_XPATH = "/config/devices/entry[@name='localhost.localdomain']/vsys/entry[@name='vsys1']/rulebase/nat/rules/entry[@name='%s']"

def add_snat_static_ip(xapi, rule_name, from_zone, to_zone, source, destination, service, bidirectional, translated_address):
    values = { "from_zone": from_zone,
               "to_zone": to_zone,
               "source": source,
               "destination": destination,
               "service": service,
               "translated_address": translated_address }
    if bidirectional:
        values['bidirectional'] = 'yes'
    else:
        values['bidirectional'] = 'no'
    exml = ["<source-translation>",
            "<static-ip>",
            "<bi-directional>%(bidirectional)s</bi-directional>",
            "<translated-address>%(translated_address)s</translated-address>",
            "</static-ip>",
            "</source-translation>",
            "<to><member>%(to_zone)s</member></to>",
            "<from><member>%(from_zone)s</member></from>",
            "<source><member>%(source)s</member></source>",
            "<destination><member>%(destination)s</member></destination>",
            "<service>%(service)s</service>",
            "<nat-type>ipv4</nat-type>"]
    exml = ''.join(exml)%values
    xapi.set(xpath=_NAT_XPATH%rule_name, element=exml)

    return True

def main():
    argument_spec = dict(
            ip_address=dict(default=None),
            password=dict(default=None),
            username=dict(default='admin'),
            rule_name=dict(default=None),
            bidirectional=dict(type='bool', default=False),
            snat_type=dict(default='static-ip'),
            translated_address=dict(default=None),
            from_zone=dict(default=None),
            to_zone=dict(default=None),
            source=dict(default="any"),
            destination=dict(default="any"),
            service=dict(default="any")
        )
    module = AnsibleModule(argument_spec=argument_spec)

    ip_address = module.params["ip_address"]
    if not ip_address:
        module.fail_json(msg="ip_address should be specified")
    password = module.params["password"]
    if not password:
        module.fail_json(msg="password is required")
    username = module.params['username']

    xapi = pan.xapi.PanXapi(hostname=ip_address, api_username=username, api_password=password)

    rule_name = module.params['rule_name']
    if not rule_name:
        module.fail_json(msg='rule_name is required')
    bidirectional = module.params['bidirectional']
    snat_type = module.params['snat_type']
    translated_address = module.params['translated_address']
    from_zone = module.params['from_zone']
    if from_zone is None:
        module.fail_json(msg='from_zone is required')
    to_zone = module.params['to_zone']
    if to_zone is None:
        module.fail_json(msg='to_zone is required')
    source = module.params['source']
    destination = module.params['destination']
    service = module.params['service']

    changed = False
    if snat_type == 'static-ip':
        changed = add_snat_static_ip(xapi, rule_name, from_zone, to_zone, source, destination, service, bidirectional, translated_address)
    else:
        module.fail_json(msg="unsupported snat type "+snat_type)

    if changed:
        xapi.commit(cmd="<commit></commit>", sync=True, interval=1)

    module.exit_json(changed=changed, msg="okey dokey")

from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
