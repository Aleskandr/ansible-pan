#!/usr/bin/python

# Copyright (c) 2014, Palo Alto Networks <techbizdev@paloaltonetworks.com>
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

DOCUMENTATION = '''
---
module: panos_vulnerability_profile
short_description: create vulnerability profile
description:
    - Create custom vulnerability profile
author: Palo Alto Networks
version_added: "0.1"
requirements:
    - pan-python
options:
    ip_address:
        description:
            - IP address (or hostname) of PAN-OS device
        required: true
        default: null
    password:
        description:
            - password for authentication
        required: true
        default: null   
    username:
        description:
            - username for authentication
        required: false
        default: "admin"
    TBD:
        description
            - ADD STUFF
        required: false
    commit:
        description:
            - commit if changed
        required: false
        default: true
'''

EXAMPLES = '''

'''

import sys

try:
    import pan.xapi
except ImportError:
    print "failed=True msg='pan-python required for this module'"
    sys.exit(1)

_SERVICE_XPATH = "/config/devices/entry[@name='localhost.localdomain']/vsys/entry[@name='vsys1']/profiles/vulnerability/entry[@name='%s']"

def vulnerability_profile_exists(xapi, vulnerability_profile_name):
    xapi.get(_SERVICE_XPATH%vulnerability_profile_name)
    e = xapi.element_root.find('.//entry')
    if e is None:
        return False
    return True

def add_vulnerability_profile(xapi, **kwargs):
    if vulnerability_profile_exists(xapi, kwargs['vulnerability_profile_name']):
        return False

    exml = []

    if kwargs['exception_ids'] is not None:
        exml.append('<threat-exception>')
        for t in kwargs['exception_ids']:
            exml.append('<entry name=\"%s\"><action><reset-client/></action></entry>'%t)
        exml.append('</threat-exception>')

    exml = ''.join(exml)

#    print "element='%s'"%exml
#    ppp=_SERVICE_XPATH%kwargs['vulnerability_profile_name']
#    print "xpath='%s'"%ppp
    xapi.set(xpath=_SERVICE_XPATH%kwargs['vulnerability_profile_name'], element=exml)

    return True

def main():
    argument_spec = dict(
            ip_address=dict(default=None),
            password=dict(default=None),
            username=dict(default='admin'),
            vulnerability_profile_name=dict(default=None),
            description=dict(default=None),
            rules=dict(default=None),
            exception_ids=dict(default=None),
            commit=dict(type='bool', default=True)
        )
    module = AnsibleModule(argument_spec=argument_spec)

    ip_address = module.params["ip_address"]
    if not ip_address:
        module.fail_json(msg="ip_address should be specified")
    password = module.params["password"]
    if not password:
        module.fail_json(msg="password is required")
    username = module.params['username']

    xapi = pan.xapi.PanXapi(hostname=ip_address, api_username=username, api_password=password)

    vulnerability_profile_name = module.params["vulnerability_profile_name"]
    if not vulnerability_profile_name:
        module.fail_json(msg="vulnerability_profile_name must be specified")

    description = module.params["description"]
    rules=module.params["rules"]
    exception_ids=module.params["exception_ids"]

    commit = module.params['commit']

    changed = False
    changed = add_vulnerability_profile(xapi, 
                                        vulnerability_profile_name=vulnerability_profile_name, 
                                        description=description,
                                        rules=rules,
                                        exception_ids=exception_ids)

    if changed and commit:
        xapi.commit(cmd="<commit></commit>", sync=True, interval=1)

    module.exit_json(changed=changed, msg="okey dokey")

from ansible.module_utils.basic import *

main()
